[comment encoding = UTF-8 /]
[**
 * The documentation of the module OIL.
 */]
[module OIL('http://www.muml.org/pim/connector/1.0.0', 
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')]
[import org::muml::codegen::c::queries::stringQueries]
[import org::muml::codegen::c::queries::modelQueries]

[**
 * The documentation of the template generateOILFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOILFile(CIs : OrderedSet(ComponentInstance), path : String)]
[file (path+'nxtOSEK.oil', false, 'UTF-8')]
[comment generate OSEK declarations for sytem properties and standard tasks/]
# include "implementation.oil"		

CPU ATMEL_AT91SAM7S256
{
  OS LEJOS_OSEK
   	{
    	STATUS = EXTENDED;
 		STARTUPHOOK = FALSE;
    	ERRORHOOK = FALSE;
    	SHUTDOWNHOOK = FALSE;
    	PRETASKHOOK = FALSE;
    	POSTTASKHOOK = FALSE;
    	USEGETSERVICEID = FALSE;
    	USEPARAMETERACCESS = FALSE;
    	USERESSCHEDULER = FALSE;
  	};

  	/* Definition of application mode */
  	APPMODE appmode1{};

  /* Main Task - starts tasks for processing steps in automaton */
  TASK Task_Main
	{
		AUTOSTART = FALSE;
		PRIORITY = 1;
		ACTIVATION = 1;
		SCHEDULE = FULL;
		STACKSIZE = 512;
	};


  /* Initialize Model and other stuff */
  TASK Task_initModel
    {
      AUTOSTART = TRUE
	  {
		APPMODE = appmode1;
      };
      PRIORITY = 10;
      ACTIVATION = 1;
      SCHEDULE = FULL;
      STACKSIZE = 512;
    };

  /* Initialize Model and other stuff */
  TASK Task_MsgExchange
    {
      AUTOSTART = FALSE;
      PRIORITY = 1;
      ACTIVATION = 1;
      SCHEDULE = FULL;
      STACKSIZE = 512;
    };

[for (ci: ComponentInstance | CIs) ? (ci.oclIsKindOf(AtomicComponentInstance) and (ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT))]
	[generateOSEKTask(ci)/]
[/for]

};


/* ----- End Of File ----- */
[/file]
[/template]

[template private generateOSEKTask(ci : ComponentInstance) ? (oclIsKindOf(AtomicComponentInstance))]
/* Task for component '[getVariableName(ci)/]' */
TASK [getTaskName(ci)/]
  {
    AUTOSTART = FALSE;
    PRIORITY = 2; //standard priority
    ACTIVATION = 1;
    SCHEDULE = NON;
    STACKSIZE = 512;
  };

[/template]
