

[comment encoding = UTF-8 /]
[**
 * The documentation of the module main.
 */]
[module main_nxtOSEK('http://www.muml.org/pim/connector/1.0.0', 
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')]


[import org::muml::codegen::c::main::main]
[import org::muml::codegen::c::files::RealtimeStatechart]
[import org::muml::codegen::c::files::RealtimeStatechartHeader]
[import org::muml::codegen::c::queries::stringQueries]
[import org::muml::codegen::c::queries::modelQueries]
[import org::muml::codegen::c::files::componentHeader]
[import org::muml::codegen::c::files::component]
[import org::muml::codegen::c::files::Message]
[import org::muml::codegen::c::files::operations]
[import org::muml::codegen::c::files::ContinuousPorts]
[import org::muml::codegen::c::files::CIC]

[import org::muml::codegen::c::nxtosek::files::make_nxtOSEK/]


[**
 * Generates a main file. This file contains code to create, initialize
 * and execute a given MUML model on nxtOSEK.
 * @param aModelElementCategory
 */]
[template public generateNXTOSEKMainFile(CIs : OrderedSet(ComponentInstance), path: String)]
[comment create 'main.c'/]
[file(path+'/main.c',false,'UTF-8')]
[nxtOSEKincludes(CIs)/]



[comment declaration of tasks for OSEK/]
//declare used OSEK tasks and counter
DeclareTask(Task_Main);
DeclareTask(Task_initModel);
DeclareTask(Task_MsgExchange);
[for (ci: ComponentInstance | CIs) ? (ci.oclIsKindOf(AtomicComponentInstance) and (ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT))]
DeclareTask([ci.getTaskName()/]);
[/for]


[comment create variable for every used component instance/]
//variable for middleware
Middleware* mw;


[comment OSEK methods/]
/* nxtOSEK hook to be invoked from an ISR in category 2 */
void user_1ms_isr_type2(void){ /* do nothing */ }

/* LEJOS OSEK hooks */
void ecrobot_device_initialize()
{
	[comment TODO/]
}
void ecrobot_device_terminate()
{
	[comment TODO/]
}
TASK(Task_initModel){
	[comment create model/]
	[comment generateInstanceConfiguration(CIs)/]
	[for (ci : ComponentInstance | CIs) ? (ci.oclIsKindOf(AtomicComponentInstance))]
		[if ((ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT))]
			[ci.oclAsType(AtomicComponentInstance).generateInstanceCreation(path)/]
		[/if]
	[/for]

		[comment set hybrid port functions/]
[for (partInstance : ComponentInstance | CIs) ? (partInstance.oclIsKindOf(AtomicComponentInstance))]
	[for (port : PortInstance | partInstance.portInstances)]
			[if (port.oclIsTypeOf(HybridPortInstance))]
				[if (port.portType.oclAsType(HybridPort).inPort)]
					mw->[partInstance.getVariableName()/]->getterOf_[port.portType.oclAsType(HybridPort).getName()/] = [port.oclAsType(HybridPortInstance).getContinuousPortInstance().getReadMethod()/];
				[else]
					mw->[partInstance.getVariableName()/]->setterOf_[port.portType.oclAsType(HybridPort).getName()/] = [port.oclAsType(HybridPortInstance).getContinuousPortInstance().getWriteMethod()/];
				[/if]
			[/if]
		[/for]
[/for]

ChainTask(Task_Main);
}


TASK(Task_Main){

	/* currently only the main task is used to execute the behavior
	*  later, we will use one task per atomic component
	*/
[for (ci: ComponentInstance | CIs) ? (ci.oclIsKindOf(AtomicComponentInstance) and (ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT))]
		ActivateTask([ci.getTaskName()/]);
[/for]


ActivateTask(Task_MsgExchange);
}

[for (ci: ComponentInstance | CIs) ? (ci.oclIsKindOf(AtomicComponentInstance) and (ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT))]
TASK([ci.getTaskName()/]){
	[ci.componentType.getProcessMethodName()/](mw->[ci.getVariableName()/]);

	//terminate and wait for reactivation
	TerminateTask();
}
[/for]

TASK(Task_MsgExchange){


ChainTask(Task_Main);
}
[/file]
[/template]





[template private nxtOSEKincludes(CIs : OrderedSet(ComponentInstance))]
//general includes
#include <stdio.h>
#include <stdlib.h>
//nxtOSEK includes
#include "kernel.h"
#include "kernel_id.h"
#include "ecrobot_interface.h"


[if CIs.componentType->select( c | c.componentKind=ComponentKind::CONTINUOUS_COMPONENT)->size()>0]
#include "continuousComponents/ContImplementations.h"
[/if]
//including all files for used Components
		[for (comp : Component | CIs.componentType) ? (comp.oclIsKindOf(AtomicComponent))]
		[if ((comp.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (comp.componentKind = ComponentKind::HYBRID_COMPONENT))]
#include "[comp.getFileName(true, false)/]"
		[/if]
		[/for]
		[for (comp : Component | CIs.componentType) ? (comp.oclIsKindOf(AtomicComponent))]
		[if ((comp.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (comp.componentKind = ComponentKind::HYBRID_COMPONENT))]
#include "[comp.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).getFileName(true, false)/]"
		[/if]
		[/for]
[/template]




[**
 * Generates code to instanciate a given component instance configuration.
 * (based on the component type files). Before using this template, it is necessary to
 * call 'generateTypeFiles' and 'generateRTSCFiles'!
 * @param modelElementCategory
 */]
[template public generateComponentVariables(CIs : OrderedSet(ComponentInstance))]
[for (cInst : ComponentInstance | CIs)]
[if ((cInst.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (cInst.componentType.componentKind = ComponentKind::HYBRID_COMPONENT))]
	[cInst.getClassName()/] * [cInst.getVariableName()/];
[/if]
[/for]
[/template]



[**
 * Generates code to instanciate a given component instance configuration.
 * (based on the component type files). Before using this template, it is necessary to
 * call 'generateTypeFiles' and 'generateRTSCFiles'!
 * @param modelElementCategory
 */]
[template public generateInstanceConfiguration(CIs : OrderedSet(ComponentInstance))]
[for (cInst : ComponentInstance | CIs)]
[if ((cInst.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (cInst.componentType.componentKind = ComponentKind::HYBRID_COMPONENT))]
//instantiate components of [cInst.getName()/]
	[cInst.getVariableName()/] = [getCreateMethodName(cInst)/]();
	[cInst.configurateInstance()/]

[/if]
[/for]
[/template]


[template private configurateInstance(cInst : ComponentInstance) ? (oclIsKindOf(StructuredComponentInstance))post(trim())]
[for (cPart : ComponentPart | cInst.oclAsType(StructuredComponentInstance).embeddedCIC.componentInstances->collect(componentPart)->asSet())]
	[for (partInstance : ComponentInstance | cInst.oclAsType(StructuredComponentInstance).embeddedCIC.componentInstances->select(componentPart = cPart))]
		[if ((partInstance.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (partInstance.componentType.componentKind = ComponentKind::HYBRID_COMPONENT))]
		//instantiate components of [cInst.getName()/]
		[partInstance.getVariableName()/] = [partInstance.getCreateMethodName()/]();
		[getAddMethodName(cInst.componentType, partInstance.componentPart)/]([cInst.getVariableName()/], [partInstance.getVariableName()/]);
		[configurateInstance(partInstance)/]
		[if (partInstance.oclIsKindOf(AtomicComponentInstance))]
		[for (port : PortInstance | partInstance.portInstances)]
			[if (port.oclIsTypeOf(HybridPortInstance))]
				[if (port.portType.oclAsType(HybridPort).inPort)]
					[partInstance.getVariableName()/]->getterOf_[port.portType.oclAsType(HybridPort).getName()/] = [port.oclAsType(HybridPortInstance).getContinuousPortInstance().getReadMethod()/];
				[else]
					[partInstance.getVariableName()/]->setterOf_[port.portType.oclAsType(HybridPort).getName()/] = [port.oclAsType(HybridPortInstance).getContinuousPortInstance().getWriteMethod()/];
				[/if]
			[/if]
		[/for]
		[/if]
		[/if]
	[/for]
[/for]
[if cInst.oclIsKindOf(StructuredComponentInstance)]
[for (conInst : ConnectorInstance | cInst.oclAsType(StructuredComponentInstance).embeddedCIC.portConnectorInstances)]
	[if (conInst.connectorEndpointInstances->at(1).type.oclIsKindOf(DiscretePort))]
	DiscreteConnection * [conInst.getVariableName()/] = DiscreteConnection_create([getVariablePath(conInst.getSourcePort())/],[getVariablePath(conInst.getTargetPort())/], [conInst.isBidirectional()/]);

	DiscreteConnectionList_add([cInst.getVariableName()/]->connectorList,[conInst.getVariableName()/]);
	[/if]
[/for]
[/if]

[/template]