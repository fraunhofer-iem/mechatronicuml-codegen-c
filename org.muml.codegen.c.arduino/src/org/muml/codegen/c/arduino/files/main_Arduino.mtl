[comment encoding = UTF-8 /]
[**
 * The documentation of the module main.
 */]
[module main_Arduino('http://www.muml.org/pim/connector/1.0.0', 
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')]


[import org::muml::codegen::c::files::make]
[import org::muml::codegen::c::files::RealtimeStatechart]
[import org::muml::codegen::c::files::RealtimeStatechartHeader]
[import org::muml::codegen::c::queries::stringQueries]
[import org::muml::codegen::c::queries::modelQueries]
[import org::muml::codegen::c::files::componentHeader]
[import org::muml::codegen::c::files::component]
[import org::muml::codegen::c::files::Message]
[import org::muml::codegen::c::files::operations]
[import org::muml::codegen::c::files::ContinuousPorts]
[import org::muml::codegen::c::files::CIC]


[**
 * Generates a main file. This file contains code to create, initialize
 * and execute a given MUML model on nxtOSEK.
 * @param aModelElementCategory
 */]
[template public generateArduinoMainFile(CIs : OrderedSet(ComponentInstance),inoName:String, path : String)]
[comment create 'main.c'/]
[file(path+inoName+'.ino',false,'UTF-8')]
//general includes
#include "MiddlewareCore.h"
#include "Debug.h"
[if CIs.componentType->select( c | c.componentKind=ComponentKind::CONTINUOUS_COMPONENT)->size()>0]
#include "contImplementations.h"
[/if]
//including all files for used Components
		[for (comp : Component | CIs.componentType->asSet()) ? (comp.oclIsKindOf(AtomicComponent))]
		[if ((comp.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (comp.componentKind = ComponentKind::HYBRID_COMPONENT))]
#include "[comp.getFileName(true, false)/]"
		[/if]
		[/for]
		[for (comp : Component | CIs.componentType->asSet()) ? (comp.oclIsKindOf(AtomicComponent))]
		[if ((comp.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (comp.componentKind = ComponentKind::HYBRID_COMPONENT))]
#include "[comp.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).getFileName(true, false)/]"
		[/if]
		[/for]

[comment create variable for every used component instance/]
//variables for component instances
[comment generateComponentVariables(CIs)/]

Middleware* mw;

void setup(){
  Serial.begin(9600);
[if CIs.componentType->select( c | c.componentKind=ComponentKind::CONTINUOUS_COMPONENT)->size()>0]
//initialize continuous components
initializeContinuousImplementations();
[/if]

//create and  initialize middleware object
 Middleware_create();
	[comment create model/]
	[comment generateInstanceConfiguration(CIs)/]
	[for (ci : ComponentInstance | CIs) ? (ci.oclIsKindOf(AtomicComponentInstance))]
		[if ((ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (ci.componentType.componentKind = ComponentKind::HYBRID_COMPONENT))]
			[ci.oclAsType(AtomicComponentInstance).generateInstanceCreation(path)/]
		[/if]
	[/for]

		[comment set hybrid port functions/]
[for (partInstance : ComponentInstance | CIs) ? (partInstance.oclIsKindOf(AtomicComponentInstance))]
	[for (port : PortInstance | partInstance.portInstances)]
			[if (port.oclIsTypeOf(HybridPortInstance))]
				[if (port.portType.oclAsType(HybridPort).inPort)]
					mw->[partInstance.getVariableName()/]->getterOf_[port.portType.oclAsType(HybridPort).getName()/] = [port.oclAsType(HybridPortInstance).getContinuousPortInstance().getReadMethod()/];
				[else]
					mw->[partInstance.getVariableName()/]->setterOf_[port.portType.oclAsType(HybridPort).getName()/] = [port.oclAsType(HybridPortInstance).getContinuousPortInstance().getWriteMethod()/];
				[/if]
			[/if]
		[/for]
[/for]
#ifdef DEBUG
printDebugInformation("Initialization done...start execution.\n");
#endif
}

void loop(){

	[comment execution of model/]
	[for (ci : ComponentInstance | CIs)? (ci.oclIsKindOf(AtomicComponentInstance))]
		[if ((ci.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (ci.componentType.componentKind = ComponentKind::HYBRID_COMPONENT))]
			[ci.componentType.getProcessMethodName()/](mw->[ci.getVariableName()/]);
		[/if]
	[/for]

}
[/file]
[/template]





[template private includes(CIs : OrderedSet(ComponentInstance))]
//general includes
#include "Middleware/MiddlewareCore.h"
#include <stdio.h>
#include <stdlib.h>
[if CIs.componentType->select( c | c.componentKind=ComponentKind::CONTINUOUS_COMPONENT)->size()>0]
#include "continuousComponents/ContImplementations.h"
[/if]
//including all files for used Components
		[for (comp : Component | CIs.componentType) ? (comp.oclIsKindOf(AtomicComponent))]
		[if ((comp.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (comp.componentKind = ComponentKind::HYBRID_COMPONENT))]
#include "[comp.getFileName(true, false)/]"
		[/if]
		[/for]
[/template]


[**
 * Generates code to instanciate a given component instance configuration.
 * (based on the component type files). Before using this template, it is necessary to
 * call 'generateTypeFiles' and 'generateRTSCFiles'!
 * @param modelElementCategory
 */]
[template public generateComponentVariables(CIs : OrderedSet(ComponentInstance))]
[for (cInst : ComponentInstance | CIs)]
[if ((cInst.componentType.componentKind = ComponentKind::SOFTWARE_COMPONENT) or (cInst.componentType.componentKind = ComponentKind::HYBRID_COMPONENT))]
	[cInst.getClassName()/] * [cInst.getVariableName()/];
[/if]
[/for]
[/template]





