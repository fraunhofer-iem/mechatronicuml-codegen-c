[comment encoding = UTF-8 /]
[**
 * Provides templates for the generation of (user defined) types.
 */]
[module customTypes('http://www.muml.org/pim/connector/1.0.0', 'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')]

[import org::muml::codegen::c::queries::stringQueries]
[import org::muml::codegen::c::queries::modelQueries]
[import org::muml::codegen::c::actionlanguage::expression]
[**
 * The documentation of the template generateCustomTypes.
 * @param CIs set of component instances
 * generates all files for (user defined) custom types, like structs
 */]
[template public generateCustomTypes(CIs : OrderedSet(ComponentInstance), path : String, useSubDir : Boolean)]
	
	[generateCustomTypeFile(getAllStructTypes(CIs), path, useSubDir)/]
[/template]



[template private generateCustomTypeFile(sTypes : Set(StructureDataType), path : String, useSubDir : Boolean)]
	[file (path+getFileName4CustomTypes(true, useSubDir), false, 'UTF-8')]


#ifndef CUSTOM_TYPES_H_
#define CUSTOM_TYPES_H_
#ifdef __cplusplus
  extern "C" {
#endif
	#include "standardTypes.h"
	[if (not sTypes->oclIsUndefined() and sTypes->size()>0)]
			[for (structType : StructureDataType | sTypes)]
			typedef struct [structType.getName()/] [structType.getName()/];
		[/for]
		[for (structType : StructureDataType | sTypes)]
			struct [structType.getName()/] {
				[for (attribute : Attribute | structType.attributes)]
					[if (attribute.dataType.oclIsKindOf(ArrayDataType))]
						[attribute.dataType.getTypeName()/] [attribute.getName()/]['['/][attribute.dataType.oclAsType(ArrayDataType).cardinality/][']'/]  ;
					[else]
						[attribute.getTypeName()/] [attribute.getName()/];
					[/if]				
				[/for]
			};
		[/for]
[/if]
#ifdef __cplusplus
  }
#endif
#endif
	[/file]
[/template]