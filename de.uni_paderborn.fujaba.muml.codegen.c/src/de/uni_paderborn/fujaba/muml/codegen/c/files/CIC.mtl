[comment encoding = UTF-8 /]
[**
 * This module contains all templates, that are used to generate the Configuration-files
 * for a given CIC.
 */]
[module CIC('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]


[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::modelQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::middlewareQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::actionlanguage::expression]
[import de::uni_paderborn::fujaba::muml::codegen::c::files::RealtimeStatechart]


[**
 * Generates the implementation file "Configuration.c" for a given RSRI.
 * 
 * @param rsri The RefinedStructuredResourceInstance for which the file "Configuration.c" will be generated.
 * @param path The relative path to the target folder of this file.
 */]
[template public generateInstanceCreation(aci : AtomicComponentInstance, path: String)]
MessageID * messageIDsOfbufferOf[aci.getVariableName()/];
		//create instance [aci.getName()/] of type [aci.componentType.getClassName()/]
		 mw->[aci.getVariableName()/] = [aci.getCreateMethodName()/]();
		[comment create ports for component/]
		[for (portInst : DiscretePortInstance | aci.eAllContents(DiscretePortInstance))]
		[let port : DiscretePort = portInst.portType]
			[comment if the port is kind of IN-port, we need to generate all port properties, like supported messagesIDs and buffers/]
			[if (port.isDiscreteInPort or port.isDiscreteInOutPort)]
				[comment create port property objects/]
				[for (msgBuffer : MessageBuffer | port.receiverMessageBuffer)]
					messageIDsOfbufferOf[aci.getVariableName()/] = (MessageID*) calloc([msgBuffer.messageType->size()/],sizeof(MessageID));
					[for (msgType: MessageType| msgBuffer.messageType)]
						messageIDsOfbufferOf[aci.getVariableName()/]['['/][i-1/][']'/] = [msgType.getIdentifierVariableName()/];
					[/for]
					MessageBuffer* [getBufferName(msgBuffer, portInst)/] = MessageBuffer_create([msgBuffer.getSizeOfMessageBuffer()/],[if (msgBuffer.bufferOverflowAvoidanceStrategy = BufferOverflowAvoidanceStrategy::DISCARD_INCOMING_MESSAGE)]false[else]true[/if],[msgBuffer.messageType->size()/],messageIDsOfbufferOf[aci.getVariableName()/]);

				[/for]
				MessageBuffer** allBuffersOf[portInst.componentInstance.getName()/][port.getName()/] = (MessageBuffer**) malloc([port.receiverMessageBuffer->size()/]*sizeof(MessageBuffer*));
				[for (buf : MessageBuffer | port.receiverMessageBuffer)]
				allBuffersOf[portInst.componentInstance.getName()/][port.getName()/]['['/][i-1/][']'/] = [getBufferName(buf, portInst)/];
				[/for]
	
				[comment create port/]
				mw->[aci.getVariableName()/]->[port.getVariableName()/] = Port_create([portInst.getIdentifierVariableName()/], [port.getNumberOfMessageBuffers()/], allBuffersOf[portInst.componentInstance.getName()/][port.getName()/]);
			
			[comment if the port is just an OUT-port, we only need to set the ID of the port and create the object/]
			[elseif port.isDiscreteOutPort]
			[comment create port/]
			mw->[aci.getVariableName()/]->[port.getVariableName()/] = Port_create([portInst.getIdentifierVariableName()/], 0, NULL);

			[/if]
		[/let]
		[/for]
		[comment create behavior for component/]
		//create behavior for component [aci.getVariableName()/]
		mw->[aci.getVariableName()/]->stateChart = [aci.componentType.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).getCreateMethodName()/](mw->[aci.getVariableName()/]);

[/template]
